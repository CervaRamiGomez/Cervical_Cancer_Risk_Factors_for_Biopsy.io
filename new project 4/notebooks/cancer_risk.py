# -*- coding: utf-8 -*-
"""cancer_risk.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aJcqTXQkjCC8ROivFoLs7RcdvOeJXBV0

# Cloud ETL - Cervical Cancer Risk
"""

import os
# Find the latest version of spark 3.2  from http://www.apache.org/dist/spark/ and enter as the spark version
# For example:
# spark_version = 'spark-3.2.2'
spark_version = 'spark-3.3.0'
os.environ['SPARK_VERSION']=spark_version

# Install Spark and Java
!apt-get update
!apt-get install --only-upgrade openjdk-11-jdk-headless -qq > /dev/null
!wget -q -c http://www.apache.org/dist/spark/$SPARK_VERSION/$SPARK_VERSION-bin-hadoop3.tgz
!tar xf $SPARK_VERSION-bin-hadoop3.tgz
!pip install -q findspark

# Set Environment Variables
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-11-openjdk-amd64"
os.environ["SPARK_HOME"] = f"/content/{spark_version}-bin-hadoop3"

# Start a SparkSession
import findspark
findspark.init()

!wget -c https://jdbc.postgresql.org/download/postgresql-42.2.9.jar

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName("Cloud-ETL").config("spark.driver.extraClassPath","/content/postgresql-42.2.9.jar").getOrCreate()

# Read in data from S3 Buckets
from pyspark import SparkFiles
url="https://myawsbucket-092422.s3.us-west-1.amazonaws.com/kag_risk_factors_cervical_cancer.csv"
spark.sparkContext.addFile(url)
risk_factors_df = spark.read.csv(SparkFiles.get("kag_risk_factors_cervical_cancer.csv"), sep=",", header=True, inferSchema=True)

# Show DataFrame
risk_factors_df.show()

"""# Count the number or records (rows) in the dataset"""

# Count the number of records (rows) in the dataset
print(risk_factors_df.count())

"""# Transform dataset to fit the tables in the schema file"""

risk_factors_df.printSchema()

risk_factors_df.columns

risk_factors_df.describe()

# Import struct fields that we can use (this is to import data types)
from pyspark.sql.types import StructField, StringType, IntegerType, FloatType, StructType

# Next we need to create the list of struct fields
# this is the syntax to fix the string to float
schema = [StructField("Age", IntegerType(), True), 
          StructField("Number of sexual partners", FloatType(), True),
          StructField("First sexual intercourse", FloatType(), True),
          StructField("Num of pregnancies", FloatType(), True),
          StructField("Smokes", FloatType(), True),
          StructField("Smokes (years)", FloatType(), True),
          StructField("Smokes (packs/year)", FloatType(), True),
          StructField("Hormonal Contraceptives", FloatType(), True),
          StructField("Hormonal Contraceptives (years)", FloatType(), True),
          StructField("IUD", FloatType(), True),
          StructField("IUD (years)", FloatType(), True),
          StructField("STDs", FloatType(), True),
          StructField("STDs (number)", FloatType(), True),
          StructField("STDs:condylomatosis", FloatType(), True),
          StructField("STDs:cervical condylomatosis", FloatType(), True),
          StructField("STDs:vaginal condylomatosis", FloatType(), True),
          StructField("STDs:vulvo-perineal condylomatosis", FloatType(), True),
          StructField("STDs:syphilis", FloatType(), True),
          StructField("STDs:pelvic inflammatory disease", FloatType(), True),
          StructField("STDs:genital herpes", FloatType(), True),
          StructField("STDs:molluscum contagiosum", FloatType(), True),
          StructField("STDs:AIDS", FloatType(), True),
          StructField("STDs:HIV", FloatType(), True),
          StructField("STDs:Hepatitis B", FloatType(), True),
          StructField("STDs:HPV", FloatType(), True),
          StructField("STDs: Number of diagnosis", IntegerType(), True),
          StructField("STDs: Time since first diagnosis", FloatType(), True),
          StructField("STDs: Time since last diagnosis", FloatType(), True),
          StructField("Dx:Cancer", IntegerType(), True),
          StructField("Dx:CIN", IntegerType(), True),
          StructField("Dx:HPV", IntegerType(), True),
          StructField("Dx", IntegerType(), True),
          StructField("Hinselmann", IntegerType(), True),
          StructField("Schiller", IntegerType(), True),
          StructField("Citology", IntegerType(), True),
          StructField("Biopsy", IntegerType(), True),
          ]
schema

final = StructType(fields=schema)
final

dataframe = spark.read.csv(SparkFiles.get("kag_risk_factors_cervical_cancer.csv"), schema=final, sep=",", header=True)
dataframe.show()

dataframe.printSchema()

dataframe.columns

table_df = dataframe.select(dataframe.columns)
table_df.show()

### Rename Columns
dataframe1 = dataframe.select(['Age',
 'Number of sexual partners',
 'First sexual intercourse',
 'Num of pregnancies',
 'Smokes',
 'Smokes (years)',
 'Smokes (packs/year)',
 'Hormonal Contraceptives',
 'Hormonal Contraceptives (years)',
 'IUD',
 'IUD (years)',
 'STDs',
 'STDs (number)',
 'STDs:condylomatosis',
 'STDs:cervical condylomatosis',
 'STDs:vaginal condylomatosis',
 'STDs:vulvo-perineal condylomatosis',
 'STDs:syphilis',
 'STDs:pelvic inflammatory disease',
 'STDs:genital herpes',
 'STDs:molluscum contagiosum',
 'STDs:AIDS',
 'STDs:HIV',
 'STDs:Hepatitis B',
 'STDs:HPV',
 'STDs: Number of diagnosis',
 'STDs: Time since first diagnosis',
 'STDs: Time since last diagnosis',
 'Dx:Cancer',
 'Dx:CIN',
 'Dx:HPV',
 'Dx',
 'Hinselmann',
 'Schiller',
 'Citology',
 'Biopsy'])
renamed_df = dataframe1.withColumnRenamed("Age", "age")\
      .withColumnRenamed("Number of sexual partners", "num_of_sexual_partners")\
      .withColumnRenamed("First sexual intercourse", "first_sexual_intercourse")\
      .withColumnRenamed("Num of pregnancies", "num_of_pregnancies")\
      .withColumnRenamed("Smokes", "smokes")\
      .withColumnRenamed("Smokes (years)", "smokes_years")\
      .withColumnRenamed("Smokes (packs/year)", "smokes_packs_per_year")\
      .withColumnRenamed("Hormonal Contraceptives", "hormonal_contraceptives")\
      .withColumnRenamed("Hormonal Contraceptives (years)", "hormonal_contraceptives_years")\
      .withColumnRenamed("IUD", "iud")\
      .withColumnRenamed("IUD (years)", "iud_years")\
      .withColumnRenamed("STDs", "stds")\
      .withColumnRenamed("STDs (number)", "stds_number")\
      .withColumnRenamed("STDs:condylomatosis", "stds_condylomatosis")\
      .withColumnRenamed("STDs:cervical condylomatosis", "stds_cervical_condylomatosis")\
      .withColumnRenamed("STDs:vaginal condylomatosis", "stds_vaginal_condylomatosis")\
      .withColumnRenamed("STDs:vulvo-perineal condylomatosis", "stds_vulvo_perineal_condylomatosis")\
      .withColumnRenamed("STDs:syphilis", "stds_syphilis")\
      .withColumnRenamed("STDs:pelvic inflammatory disease", "stds_pelvic_inflamatory_disease")\
      .withColumnRenamed("STDs:genital herpes", "stds_genital_herpes")\
      .withColumnRenamed("STDs:molluscum contagiosum", "stds_molluscum_contagiosum")\
      .withColumnRenamed("STDs:AIDS", "stds_aids")\
      .withColumnRenamed("STDs:HIV", "stds_hiv")\
      .withColumnRenamed("STDs:Hepatitis B", "stds_hepatitis_b")\
      .withColumnRenamed("STDs:HPV", "stds_hpv")\
      .withColumnRenamed("STDs: Number of diagnosis", "stds_num_of_diagnosis")\
      .withColumnRenamed("STDs: Time since first diagnosis", "stds_time_since_first_diagnosis")\
      .withColumnRenamed("STDs: Time since last diagnosis", "stds_times_since_last_diagnosis")\
      .withColumnRenamed("Dx:Cancer", "dx_cancer")\
      .withColumnRenamed("Dx:CIN", "dx_cin")\
      .withColumnRenamed("Dx:HPV", "dx_hpv")\
      .withColumnRenamed("Dx", "dx")\
      .withColumnRenamed("Hinselmann", "hinselmann")\
      .withColumnRenamed("Schiller", "schiller")\
      .withColumnRenamed("Citology", "citology")\
      .withColumnRenamed("Biopsy", "biopsy")
renamed_df.show()

renamed_df.columns

"""# Configuration for RDS instance"""

mode = "append"
jdbc_url="jdbc:postgresql://mypostgresdb.cta4se2uahzn.us-west-1.rds.amazonaws.com:5432/cancer_risk_db"
config = {"user":"postgres", "password": "Yaya092422", "driver":"org.postgresql.Driver"}

"""# Write DataFrames to tables to AWS RDS"""

# Write review_id_df to table in RDS
renamed_df.write.jdbc(url=jdbc_url, table='cancer_risk', mode=mode, properties=config)

"""# Read table from AWS RDS"""

from pyspark.sql import SparkSession
spark = SparkSession.builder.config('spark.driver.extraClassPath', '/path/to/postgresql.jar').getOrCreate()
url = 'jdbc:postgresql://mypostgresdb.cta4se2uahzn.us-west-1.rds.amazonaws.com:5432/cancer_risk_db'
properties = {'user': 'postgres', 'password': 'Yaya092422'}
postgres_df = spark.read.jdbc(url=url, table='cancer_risk', properties=properties)
postgres_df.show()

"""# Run Queries"""

smokes_df = postgres_df.select(["smokes", "smokes_years", "smokes_packs_per_year"])
smokes_df.show()

postgres_df.summary().show()